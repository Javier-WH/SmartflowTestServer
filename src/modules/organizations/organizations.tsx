import { useEffect, useState, type ChangeEvent } from 'react';
import { Spinner, useDisclosure } from '@heroui/react';
import { Button, Input } from '@/components/ui';
import { PlusOutlined, TeamOutlined, SearchOutlined } from '@ant-design/icons';
import useOrganizations from './hook/useOrganizations';
import useAuth from '../auth/hooks/useAuth';
import type { Organization, OrganizationFormData } from './types/organizations';
import CreateOrganizationModal from './components/CreateOrganizationModal';
import OrganizationCard from './components/organization-card';
import UserMenu from '@/components/ui/UserMenu';

export default function Organizations() {
    const { user, signOut } = useAuth();
    const { data: organizations, isLoading, error, createOrganization, mutate } = useOrganizations(user?.id);
    const [searchTerm, setSearchTerm] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [formError, setFormError] = useState('');

    useEffect(() => {
        mutate();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    // Form data state
    const [formData, setFormData] = useState<OrganizationFormData>({
        name: '',
        description: '',
    });

    // Modal states using useDisclosure
    const { isOpen: isCreateModalOpen, onOpen: onCreateModalOpen, onClose: onCreateModalClose } = useDisclosure();

    // Filter organizations based on search term
    const filteredOrganizations = organizations?.filter(
        (org: Organization) => org.name?.toLowerCase().includes(searchTerm.toLowerCase()) ?? false,
    );

    // Handle create form submit
    const handleCreateSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();

        if (!formData.name.trim()) {
            setFormError('Organization name is required');
            return;
        }

        setIsSubmitting(true);
        setFormError('');

        try {
            if (!user?.id) {
                throw new Error('User not authenticated');
            }

            const response = await createOrganization(
                formData.name.trim(),
                formData.description.trim(),
                '', // Slug will be generated by the backend
                user.id,
            );

            if (response.error) {
                setFormError(response.message);
                return;
            }

            // Refresh organizations list
            mutate();
            onCreateModalClose();
        } catch (error) {
            setFormError('An unexpected error occurred');
            console.error(error);
        } finally {
            setIsSubmitting(false);
        }
    };

    // Handle form input change
    const handleInputChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value,
        }));
    };

    // Handle create organization button click
    const handleCreateOrganization = () => {
        setFormData({
            name: '',
            description: '',
        });
        setFormError('');
        onCreateModalOpen();
    };

    if (isLoading) {
        return (
            <div className="flex justify-center items-center h-[calc(100vh-120px)]">
                <Spinner size="lg" />
            </div>
        );
    }

    if (error) {
        return (
            <div className="flex flex-col justify-center items-center h-[calc(100vh-120px)]">
                <p className="text-danger text-lg">Error loading organizations</p>
                <Button color="primary" className="mt-4" onClick={() => window.location.reload()}>
                    Try Again
                </Button>
            </div>
        );
    }

    return (
        <div>
            <header className="flex justify-end px-8 w-full py-2 fixed top-0 bg-gray-100">
                <UserMenu />
            </header>
            <section className="py-8 max-w-7xl mx-auto mt-16">
                <div className="flex justify-between items-center mb-8">
                    <h1 className="text-2xl font-semibold">Your Organizations</h1>
                    <Button color="primary" startContent={<PlusOutlined />} onClick={handleCreateOrganization}>
                        Create Organization
                    </Button>
                </div>

                <div className="mb-6 max-w-md">
                    <Input
                        placeholder="Search organizations..."
                        value={searchTerm}
                        type="search"
                        onChange={(e: ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}
                        startContent={<SearchOutlined className="text-gray-400" />}
                        onClear={() => setSearchTerm('')}
                        isClearable
                        autoFocus
                    />
                </div>

                {filteredOrganizations?.length === 0 ? (
                    <div className="flex flex-col items-center justify-center py-16 px-4 border-2 border-dashed rounded-lg">
                        <TeamOutlined style={{ fontSize: '48px', color: '#888' }} />
                        <p className="mt-4 text-lg text-gray-600">
                            {searchTerm ? 'No organizations found matching your search' : 'No organizations found'}
                        </p>
                        {searchTerm ? (
                            <Button color="primary" variant="light" onClick={() => setSearchTerm('')} className="mt-2">
                                Clear Search
                            </Button>
                        ) : (
                            <Button color="primary" className="mt-4" onClick={handleCreateOrganization}>
                                Create Your First Organization
                            </Button>
                        )}
                    </div>
                ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {filteredOrganizations?.map((org: Organization) => (
                            <OrganizationCard key={org.id} organization={org} />
                        ))}
                    </div>
                )}

                <CreateOrganizationModal
                    isOpen={isCreateModalOpen}
                    onClose={onCreateModalClose}
                    formData={formData}
                    handleInputChange={handleInputChange}
                    handleSubmit={handleCreateSubmit}
                    isSubmitting={isSubmitting}
                    formError={formError}
                />
            </section>
        </div>
    );
}
