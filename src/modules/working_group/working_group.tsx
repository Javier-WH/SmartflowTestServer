import { useEffect, useState, type ChangeEvent } from 'react';
import { useDisclosure } from '@heroui/react';
import Spinner from '@/components/ui/Spinner';
import { Input } from '@/components/ui';
import { PlusOutlined, TeamOutlined, SearchOutlined } from '@ant-design/icons';
import useWorkingGroup from './hook/useWorkingGroup';
import useAuth from '../auth/hooks/useAuth';
import type { WorkingGroup, WorkingGroupFormData } from './types/working_group';
import CreateWorkingGroupModal from './components/CreateWorkingGroupModal';
import WorkingGroupCard from './components/WorkingGroupCard';
import { useTranslation } from 'react-i18next';
import Button from '@/components/ui/Button';




export interface UserRoll {
    id: string;
    level: string;
    read: boolean;
    write: boolean;
    delete: boolean;
    invite: boolean;
    configure: boolean;
}

export default function WorkingGroups() {
    const { t } = useTranslation();
    const { user } = useAuth();
    const {
        data: working_groups,
        isLoading,
        error,
        createWorkingGroup,
        mutate,
        getUserRolls,
    } = useWorkingGroup(user?.id);
    const [searchTerm, setSearchTerm] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [formError, setFormError] = useState('');
    const [userRolls, setUserRolls] = useState<UserRoll[]>([]);

    useEffect(() => {
        mutate();
        {
            localStorage.removeItem('OrgName');
        }

        getUserRolls()
            .then(res => {
                if (res.error) {
                    console.error(res.message);
                    return;
                }
                const userRolls: UserRoll[] = (res.data as UserRoll[]) || [];
                const sortedRolls = userRolls.sort((a, b) => {
                    const order = ['Lector', 'Editor'];
                    const aIndex = order.indexOf(a.level);
                    const bIndex = order.indexOf(b.level);

                    if (aIndex !== -1 && bIndex !== -1) {
                        return aIndex - bIndex;
                    }
                    if (aIndex !== -1) {
                        return -1;
                    }
                    if (bIndex !== -1) {
                        return 1;
                    }
                    return 0;
                });
                setUserRolls(sortedRolls);
            })
            .catch(err => {
                console.error(err);
            });
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    // Form data state
    const [formData, setFormData] = useState<WorkingGroupFormData>({
        name: '',
        description: '',
    });

    // Modal states using useDisclosure
    const { isOpen: isCreateModalOpen, onOpen: onCreateModalOpen, onClose: onCreateModalClose } = useDisclosure();

    // Filter working_groups based on search term
    const filteredWorkingGroups = working_groups?.filter(
        (org: WorkingGroup) => org.name?.toLowerCase().includes(searchTerm.toLowerCase()) ?? false,
    );

    // Handle create form submit
    const handleCreateSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();

        if (!formData.name.trim()) {
            setFormError(t('working_group_name_required_message'));
            return;
        }

        setIsSubmitting(true);
        setFormError('');

        try {
            if (!user?.id) {
                throw new Error(t('unauthenticated_message'));
            }

            const response = await createWorkingGroup(
                formData.name.trim(),
                formData.description.trim(),
                '', // Slug will be generated by the backend
                user.id,
            );

            if (response.error) {
                setFormError(response.message);
                return;
            }

            // Refresh working_groups list
            mutate();
            onCreateModalClose();
        } catch (error) {
            setFormError(t('unexpected_error_message'));
            console.error(error);
        } finally {
            setIsSubmitting(false);
        }
    };

    // Handle form input change
    const handleInputChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value,
        }));
    };

    // Handle create working group button click
    const handleCreateWorkingGroup = () => {
        setFormData({
            name: '',
            description: '',
        });
        setFormError('');
        onCreateModalOpen();
    };

    if (isLoading) {
        return (
            <div className="flex justify-center items-center h-[calc(100vh-120px)]">
                <Spinner  />
            </div>
        );
    }

    if (error) {
        return (
            <div className="flex flex-col justify-center items-center h-[calc(100vh-120px)]">
                <p className="text-danger text-lg">{t('error_loading_organizations')}</p>
                <Button text={t("reload")} icon={<TeamOutlined />} onClick={() => window.location.reload()} />
            </div>
        );
    }

    return (
        <div className="overflow-y-auto h-full p-4 lg:p-6">
            <section className="pb-8 max-w-7xl mx-auto">
                <h1 className="text-2xl font-semibold">{t('your_working_group_title')}</h1>

                <div
                    style={{
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignItems: 'baseline',
                        height: '100px',
                        marginTop: '20px',
                        marginBottom: '-40px',
                    }}
                >
                    <div className="max-w-md h-10">
                        <Input
                            size="sm"
                            placeholder={t('search_working_group_placeholder')}
                            value={searchTerm}
                            type="search"
                            onChange={(e: ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}
                            startContent={<SearchOutlined className="text-gray-400" />}
                            onClear={() => setSearchTerm('')}
                            isClearable
                            autoFocus
                        />
                    </div>
                    <div className="flex justify-between items-center">
                        <Button text={t("create_organization_button")} icon={<PlusOutlined />} onClick={handleCreateWorkingGroup} />
                    </div>
                </div>

                {filteredWorkingGroups?.length === 0 ? (
                    <div className="flex flex-col items-center justify-center py-16 px-4 border-2 border-dashed rounded-lg">
                        <TeamOutlined style={{ fontSize: '48px', color: '#888' }} />
                        <p className="mt-4 text-lg text-gray-600">
                            {searchTerm ? t('no_working_group_matched_message') : t('no_working_group_found_message')}
                        </p>
                        {searchTerm ? (
                            <Button text={t("clear_search_button")} onClick={() => setSearchTerm('')} />
                        ) : (
                            <Button text={t("create_your_first_organization_message")} onClick={handleCreateWorkingGroup} />
                        )}
                    </div>
                ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {filteredWorkingGroups?.map((org: WorkingGroup) => (
                            <WorkingGroupCard key={org.id} workingGroup={org} userRolls={userRolls} />
                        ))}
                    </div>
                )}

                <CreateWorkingGroupModal
                    isOpen={isCreateModalOpen}
                    onClose={onCreateModalClose}
                    formData={formData}
                    handleInputChange={handleInputChange}
                    handleSubmit={handleCreateSubmit}
                    isSubmitting={isSubmitting}
                    formError={formError}
                />
            </section>
        </div>
    );
}
